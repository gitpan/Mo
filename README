NAME
    Mo - Micro Objects. Mo is less.

SYNOPSIS
        package Less;
        use Mo;
        extends 'Nothing';

        has 'something' => (
            is => 'rw',
            default => sub {
                my $self = shift;
                $self->build_something;
            },
        );

        sub BUILD {
            my $self = shift;
            $self->SUPER::BUILD();
            # ... 
        }

DESCRIPTION
    use Mo. Mo is less.

    Moose led to Mouse led to Moo led to Mo. M is nothing. Mo is more. Not
    much.

    When Moo is more than you need, drop an 'o' and get some Mo.

FEATURES
    This is what you get. Nothing Mo.

    "new" method
        Mo provides a "new" object constructor. It will call the "BUILD"
        method after creation if it "can".

    "extends"
        Mo exports the "extends" keyword, to name your parent class. "Mo"
        itself is your default parent class, of course.

    "has"
        Mo exports a "has" keyword, to generate accessors.

        These accessors support "get" and "set" operations and allows a
        "default". That's it.

            has 'name';
            has 'name' => ( default => sub { 'Joe' } );

        "has" takes arguments after the name. Here is what it currently
        supports:

        default
            Should be a code reference. The object instance is passed in,
            and it should return the default value for this attribute.
            Default is always called lazily.

        Any other arguments are ignored. This lets you switch from Moo to Mo
        and back, without having to change all your accessors.

    "strict" and "warnings"
        Mo turns on "use strict" and "use warnings".

    Embeddable
        Mo is tiny. You can easily inline it in your code, if you want to.

AUTHORS
    Ingy döt Net <ingy@cpan.org>

    Damien 'dams' Krotkine <dams@cpan.org>

COPYRIGHT AND LICENSE
    Copyright (c) 2011. Ingy döt Net.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

    See http://www.perl.com/perl/misc/Artistic.html

