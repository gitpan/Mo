NAME
    Mo - Micro Objects. Mo is less.

SYNOPSIS
        package Less;
        use Mo;
        extends 'Nothing';

        has 'something' => (
            is => 'rw',
            default => sub {
                my $self = shift;
                $self->build_something;
            },
        );

        sub BUILD {
            my $self = shift;
            # enhance your object before it is returned by new()
        }

DESCRIPTION
    use Mo. Mo is less. Much less.

    Moose is huge. Moose led to Mouse led to Moo led to Mo. M is nothing. Mo
    is more. Not much.

    When Moo is more than you need, drop an 'o' and get some Mo.

FEATURES
    This is what you get. Nothing Mo.

    "new" method
        Mo provides a "new" object constructor. You pass it a list of
        name/value pairs and it returns a new object.

        After object creation, it will call the "BUILD" method (if present)
        for all of its parents and itself.

    "extends"
        Mo exports the "extends" keyword, to declare your parent class. "Mo"
        itself is your default parent class, of course.

        Mo only supports single inheritance. If you need multiple
        inheritance or roles, you should upgrade to Moo.

    "has"
        Mo exports a "has" keyword, to generate accessors.

        These accessors always support both "get" and "set" operations. They
        allow the "default" and "builder" options. That's it.

            has 'name1';
            has 'name2' => ( default => sub { 'Joe' } );
            has 'name3' => ( builder => 'name_builder' );

        "has" takes arguments after the name. Here is what it currently
        supports:

        default
            Must be a code reference. The object instance is passed in, and
            it should return the default value for this attribute. "default"
            is always called lazily. ie It is called when you try to get the
            value and it does not(exists()).

        builder
            Must be a method name. This method should return the default
            value for this attribute. "builder" is always called lazily.

        Any other arguments are ignored. This lets you switch from Moo to Mo
        and back, without having to change all your accessors.

    "strict" and "warnings"
        Mo turns on "use strict" and "use warnings" for you.

    Embeddable
        Mo is tiny. It is compressed into a single line. You can easily
        inline it in your code, should you want to do that.

AUTHORS
    Ingy döt Net <ingy@cpan.org>

    Damien 'dams' Krotkine <dams@cpan.org>

COPYRIGHT AND LICENSE
    Copyright (c) 2011. Ingy döt Net.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

    See http://www.perl.com/perl/misc/Artistic.html

